module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCheckout {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateLineItem {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Checkout {
  id: ID!
  uuid: String!
  customer: Customer!
  status: STATUS!
  data_message: String
}

type CheckoutConnection {
  pageInfo: PageInfo!
  edges: [CheckoutEdge]!
  aggregate: AggregateCheckout!
}

input CheckoutCreateInput {
  id: ID
  uuid: String!
  customer: CustomerCreateOneWithoutCheckoutsInput!
  status: STATUS
  data_message: String
}

input CheckoutCreateManyWithoutCustomerInput {
  create: [CheckoutCreateWithoutCustomerInput!]
  connect: [CheckoutWhereUniqueInput!]
}

input CheckoutCreateWithoutCustomerInput {
  id: ID
  uuid: String!
  status: STATUS
  data_message: String
}

type CheckoutEdge {
  node: Checkout!
  cursor: String!
}

enum CheckoutOrderByInput {
  id_ASC
  id_DESC
  uuid_ASC
  uuid_DESC
  status_ASC
  status_DESC
  data_message_ASC
  data_message_DESC
}

type CheckoutPreviousValues {
  id: ID!
  uuid: String!
  status: STATUS!
  data_message: String
}

input CheckoutScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uuid: String
  uuid_not: String
  uuid_in: [String!]
  uuid_not_in: [String!]
  uuid_lt: String
  uuid_lte: String
  uuid_gt: String
  uuid_gte: String
  uuid_contains: String
  uuid_not_contains: String
  uuid_starts_with: String
  uuid_not_starts_with: String
  uuid_ends_with: String
  uuid_not_ends_with: String
  status: STATUS
  status_not: STATUS
  status_in: [STATUS!]
  status_not_in: [STATUS!]
  data_message: String
  data_message_not: String
  data_message_in: [String!]
  data_message_not_in: [String!]
  data_message_lt: String
  data_message_lte: String
  data_message_gt: String
  data_message_gte: String
  data_message_contains: String
  data_message_not_contains: String
  data_message_starts_with: String
  data_message_not_starts_with: String
  data_message_ends_with: String
  data_message_not_ends_with: String
  AND: [CheckoutScalarWhereInput!]
  OR: [CheckoutScalarWhereInput!]
  NOT: [CheckoutScalarWhereInput!]
}

type CheckoutSubscriptionPayload {
  mutation: MutationType!
  node: Checkout
  updatedFields: [String!]
  previousValues: CheckoutPreviousValues
}

input CheckoutSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CheckoutWhereInput
  AND: [CheckoutSubscriptionWhereInput!]
}

input CheckoutUpdateInput {
  uuid: String
  customer: CustomerUpdateOneRequiredWithoutCheckoutsInput
  status: STATUS
  data_message: String
}

input CheckoutUpdateManyDataInput {
  uuid: String
  status: STATUS
  data_message: String
}

input CheckoutUpdateManyMutationInput {
  uuid: String
  status: STATUS
  data_message: String
}

input CheckoutUpdateManyWithoutCustomerInput {
  create: [CheckoutCreateWithoutCustomerInput!]
  delete: [CheckoutWhereUniqueInput!]
  connect: [CheckoutWhereUniqueInput!]
  set: [CheckoutWhereUniqueInput!]
  disconnect: [CheckoutWhereUniqueInput!]
  update: [CheckoutUpdateWithWhereUniqueWithoutCustomerInput!]
  upsert: [CheckoutUpsertWithWhereUniqueWithoutCustomerInput!]
  deleteMany: [CheckoutScalarWhereInput!]
  updateMany: [CheckoutUpdateManyWithWhereNestedInput!]
}

input CheckoutUpdateManyWithWhereNestedInput {
  where: CheckoutScalarWhereInput!
  data: CheckoutUpdateManyDataInput!
}

input CheckoutUpdateWithoutCustomerDataInput {
  uuid: String
  status: STATUS
  data_message: String
}

input CheckoutUpdateWithWhereUniqueWithoutCustomerInput {
  where: CheckoutWhereUniqueInput!
  data: CheckoutUpdateWithoutCustomerDataInput!
}

input CheckoutUpsertWithWhereUniqueWithoutCustomerInput {
  where: CheckoutWhereUniqueInput!
  update: CheckoutUpdateWithoutCustomerDataInput!
  create: CheckoutCreateWithoutCustomerInput!
}

input CheckoutWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uuid: String
  uuid_not: String
  uuid_in: [String!]
  uuid_not_in: [String!]
  uuid_lt: String
  uuid_lte: String
  uuid_gt: String
  uuid_gte: String
  uuid_contains: String
  uuid_not_contains: String
  uuid_starts_with: String
  uuid_not_starts_with: String
  uuid_ends_with: String
  uuid_not_ends_with: String
  customer: CustomerWhereInput
  status: STATUS
  status_not: STATUS
  status_in: [STATUS!]
  status_not_in: [STATUS!]
  data_message: String
  data_message_not: String
  data_message_in: [String!]
  data_message_not_in: [String!]
  data_message_lt: String
  data_message_lte: String
  data_message_gt: String
  data_message_gte: String
  data_message_contains: String
  data_message_not_contains: String
  data_message_starts_with: String
  data_message_not_starts_with: String
  data_message_ends_with: String
  data_message_not_ends_with: String
  AND: [CheckoutWhereInput!]
}

input CheckoutWhereUniqueInput {
  id: ID
  uuid: String
}

type Customer {
  id: ID!
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  line_items(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
  lienItemCount: Int!
  checkouts(where: CheckoutWhereInput, orderBy: CheckoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Checkout!]
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  id: ID
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  line_items: LineItemCreateManyWithoutCustomerInput
  lienItemCount: Int
  checkouts: CheckoutCreateManyWithoutCustomerInput
}

input CustomerCreateOneWithoutCheckoutsInput {
  create: CustomerCreateWithoutCheckoutsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOneWithoutLine_itemsInput {
  create: CustomerCreateWithoutLine_itemsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutCheckoutsInput {
  id: ID
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  line_items: LineItemCreateManyWithoutCustomerInput
  lienItemCount: Int
}

input CustomerCreateWithoutLine_itemsInput {
  id: ID
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  lienItemCount: Int
  checkouts: CheckoutCreateManyWithoutCustomerInput
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  last_name_ASC
  last_name_DESC
  email_ASC
  email_DESC
  address_ASC
  address_DESC
  postal_code_ASC
  postal_code_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  cel_phone_ASC
  cel_phone_DESC
  lienItemCount_ASC
  lienItemCount_DESC
}

type CustomerPreviousValues {
  id: ID!
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  lienItemCount: Int!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateInput {
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  line_items: LineItemUpdateManyWithoutCustomerInput
  lienItemCount: Int
  checkouts: CheckoutUpdateManyWithoutCustomerInput
}

input CustomerUpdateManyMutationInput {
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  lienItemCount: Int
}

input CustomerUpdateOneRequiredWithoutCheckoutsInput {
  create: CustomerCreateWithoutCheckoutsInput
  update: CustomerUpdateWithoutCheckoutsDataInput
  upsert: CustomerUpsertWithoutCheckoutsInput
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateOneWithoutLine_itemsInput {
  create: CustomerCreateWithoutLine_itemsInput
  update: CustomerUpdateWithoutLine_itemsDataInput
  upsert: CustomerUpsertWithoutLine_itemsInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerWhereUniqueInput
}

input CustomerUpdateWithoutCheckoutsDataInput {
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  line_items: LineItemUpdateManyWithoutCustomerInput
  lienItemCount: Int
}

input CustomerUpdateWithoutLine_itemsDataInput {
  name: String
  last_name: String
  email: String
  address: String
  postal_code: String
  city: String
  state: String
  cel_phone: String
  lienItemCount: Int
  checkouts: CheckoutUpdateManyWithoutCustomerInput
}

input CustomerUpsertWithoutCheckoutsInput {
  update: CustomerUpdateWithoutCheckoutsDataInput!
  create: CustomerCreateWithoutCheckoutsInput!
}

input CustomerUpsertWithoutLine_itemsInput {
  update: CustomerUpdateWithoutLine_itemsDataInput!
  create: CustomerCreateWithoutLine_itemsInput!
}

input CustomerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  postal_code: String
  postal_code_not: String
  postal_code_in: [String!]
  postal_code_not_in: [String!]
  postal_code_lt: String
  postal_code_lte: String
  postal_code_gt: String
  postal_code_gte: String
  postal_code_contains: String
  postal_code_not_contains: String
  postal_code_starts_with: String
  postal_code_not_starts_with: String
  postal_code_ends_with: String
  postal_code_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  cel_phone: String
  cel_phone_not: String
  cel_phone_in: [String!]
  cel_phone_not_in: [String!]
  cel_phone_lt: String
  cel_phone_lte: String
  cel_phone_gt: String
  cel_phone_gte: String
  cel_phone_contains: String
  cel_phone_not_contains: String
  cel_phone_starts_with: String
  cel_phone_not_starts_with: String
  cel_phone_ends_with: String
  cel_phone_not_ends_with: String
  line_items_some: LineItemWhereInput
  lienItemCount: Int
  lienItemCount_not: Int
  lienItemCount_in: [Int!]
  lienItemCount_not_in: [Int!]
  lienItemCount_lt: Int
  lienItemCount_lte: Int
  lienItemCount_gt: Int
  lienItemCount_gte: Int
  checkouts_some: CheckoutWhereInput
  AND: [CustomerWhereInput!]
}

input CustomerWhereUniqueInput {
  id: ID
}

type LineItem {
  id: ID!
  quantity: Int!
  customer: Customer
  product: Product!
}

type LineItemConnection {
  pageInfo: PageInfo!
  edges: [LineItemEdge]!
  aggregate: AggregateLineItem!
}

input LineItemCreateInput {
  id: ID
  quantity: Int
  customer: CustomerCreateOneWithoutLine_itemsInput
  product: ProductCreateOneWithoutLine_itemsInput!
}

input LineItemCreateManyWithoutCustomerInput {
  create: [LineItemCreateWithoutCustomerInput!]
  connect: [LineItemWhereUniqueInput!]
}

input LineItemCreateManyWithoutProductInput {
  create: [LineItemCreateWithoutProductInput!]
  connect: [LineItemWhereUniqueInput!]
}

input LineItemCreateWithoutCustomerInput {
  id: ID
  quantity: Int
  product: ProductCreateOneWithoutLine_itemsInput!
}

input LineItemCreateWithoutProductInput {
  id: ID
  quantity: Int
  customer: CustomerCreateOneWithoutLine_itemsInput
}

type LineItemEdge {
  node: LineItem!
  cursor: String!
}

enum LineItemOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
}

type LineItemPreviousValues {
  id: ID!
  quantity: Int!
}

input LineItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [LineItemScalarWhereInput!]
  OR: [LineItemScalarWhereInput!]
  NOT: [LineItemScalarWhereInput!]
}

type LineItemSubscriptionPayload {
  mutation: MutationType!
  node: LineItem
  updatedFields: [String!]
  previousValues: LineItemPreviousValues
}

input LineItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LineItemWhereInput
  AND: [LineItemSubscriptionWhereInput!]
}

input LineItemUpdateInput {
  quantity: Int
  customer: CustomerUpdateOneWithoutLine_itemsInput
  product: ProductUpdateOneRequiredWithoutLine_itemsInput
}

input LineItemUpdateManyDataInput {
  quantity: Int
}

input LineItemUpdateManyMutationInput {
  quantity: Int
}

input LineItemUpdateManyWithoutCustomerInput {
  create: [LineItemCreateWithoutCustomerInput!]
  delete: [LineItemWhereUniqueInput!]
  connect: [LineItemWhereUniqueInput!]
  set: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  update: [LineItemUpdateWithWhereUniqueWithoutCustomerInput!]
  upsert: [LineItemUpsertWithWhereUniqueWithoutCustomerInput!]
  deleteMany: [LineItemScalarWhereInput!]
  updateMany: [LineItemUpdateManyWithWhereNestedInput!]
}

input LineItemUpdateManyWithoutProductInput {
  create: [LineItemCreateWithoutProductInput!]
  delete: [LineItemWhereUniqueInput!]
  connect: [LineItemWhereUniqueInput!]
  set: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  update: [LineItemUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [LineItemUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [LineItemScalarWhereInput!]
  updateMany: [LineItemUpdateManyWithWhereNestedInput!]
}

input LineItemUpdateManyWithWhereNestedInput {
  where: LineItemScalarWhereInput!
  data: LineItemUpdateManyDataInput!
}

input LineItemUpdateWithoutCustomerDataInput {
  quantity: Int
  product: ProductUpdateOneRequiredWithoutLine_itemsInput
}

input LineItemUpdateWithoutProductDataInput {
  quantity: Int
  customer: CustomerUpdateOneWithoutLine_itemsInput
}

input LineItemUpdateWithWhereUniqueWithoutCustomerInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateWithoutCustomerDataInput!
}

input LineItemUpdateWithWhereUniqueWithoutProductInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateWithoutProductDataInput!
}

input LineItemUpsertWithWhereUniqueWithoutCustomerInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateWithoutCustomerDataInput!
  create: LineItemCreateWithoutCustomerInput!
}

input LineItemUpsertWithWhereUniqueWithoutProductInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateWithoutProductDataInput!
  create: LineItemCreateWithoutProductInput!
}

input LineItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  customer: CustomerWhereInput
  product: ProductWhereInput
  AND: [LineItemWhereInput!]
}

input LineItemWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCheckout(data: CheckoutCreateInput!): Checkout!
  updateCheckout(data: CheckoutUpdateInput!, where: CheckoutWhereUniqueInput!): Checkout
  updateManyCheckouts(data: CheckoutUpdateManyMutationInput!, where: CheckoutWhereInput): BatchPayload!
  upsertCheckout(where: CheckoutWhereUniqueInput!, create: CheckoutCreateInput!, update: CheckoutUpdateInput!): Checkout!
  deleteCheckout(where: CheckoutWhereUniqueInput!): Checkout
  deleteManyCheckouts(where: CheckoutWhereInput): BatchPayload!
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createLineItem(data: LineItemCreateInput!): LineItem!
  updateLineItem(data: LineItemUpdateInput!, where: LineItemWhereUniqueInput!): LineItem
  updateManyLineItems(data: LineItemUpdateManyMutationInput!, where: LineItemWhereInput): BatchPayload!
  upsertLineItem(where: LineItemWhereUniqueInput!, create: LineItemCreateInput!, update: LineItemUpdateInput!): LineItem!
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteManyLineItems(where: LineItemWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  name: String!
  price: Float!
  size: String
  image: String!
  personalItem: Boolean!
  max_buy: Int!
  min_buy: Int!
  discount_for_more: Int
  line_items(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  price: Float
  size: String
  image: String!
  personalItem: Boolean
  max_buy: Int
  min_buy: Int
  discount_for_more: Int
  line_items: LineItemCreateManyWithoutProductInput
}

input ProductCreateOneWithoutLine_itemsInput {
  create: ProductCreateWithoutLine_itemsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutLine_itemsInput {
  id: ID
  name: String!
  price: Float
  size: String
  image: String!
  personalItem: Boolean
  max_buy: Int
  min_buy: Int
  discount_for_more: Int
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  size_ASC
  size_DESC
  image_ASC
  image_DESC
  personalItem_ASC
  personalItem_DESC
  max_buy_ASC
  max_buy_DESC
  min_buy_ASC
  min_buy_DESC
  discount_for_more_ASC
  discount_for_more_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  price: Float!
  size: String
  image: String!
  personalItem: Boolean
  max_buy: Int!
  min_buy: Int!
  discount_for_more: Int
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  price: Float
  size: String
  image: String
  personalItem: Boolean
  max_buy: Int
  min_buy: Int
  discount_for_more: Int
  line_items: LineItemUpdateManyWithoutProductInput
}

input ProductUpdateManyMutationInput {
  name: String
  price: Float
  size: String
  image: String
  personalItem: Boolean
  max_buy: Int
  min_buy: Int
  discount_for_more: Int
}

input ProductUpdateOneRequiredWithoutLine_itemsInput {
  create: ProductCreateWithoutLine_itemsInput
  update: ProductUpdateWithoutLine_itemsDataInput
  upsert: ProductUpsertWithoutLine_itemsInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutLine_itemsDataInput {
  name: String
  price: Float
  size: String
  image: String
  personalItem: Boolean
  max_buy: Int
  min_buy: Int
  discount_for_more: Int
}

input ProductUpsertWithoutLine_itemsInput {
  update: ProductUpdateWithoutLine_itemsDataInput!
  create: ProductCreateWithoutLine_itemsInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  size: String
  size_not: String
  size_in: [String!]
  size_not_in: [String!]
  size_lt: String
  size_lte: String
  size_gt: String
  size_gte: String
  size_contains: String
  size_not_contains: String
  size_starts_with: String
  size_not_starts_with: String
  size_ends_with: String
  size_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  personalItem: Boolean
  personalItem_not: Boolean
  max_buy: Int
  max_buy_not: Int
  max_buy_in: [Int!]
  max_buy_not_in: [Int!]
  max_buy_lt: Int
  max_buy_lte: Int
  max_buy_gt: Int
  max_buy_gte: Int
  min_buy: Int
  min_buy_not: Int
  min_buy_in: [Int!]
  min_buy_not_in: [Int!]
  min_buy_lt: Int
  min_buy_lte: Int
  min_buy_gt: Int
  min_buy_gte: Int
  discount_for_more: Int
  discount_for_more_not: Int
  discount_for_more_in: [Int!]
  discount_for_more_not_in: [Int!]
  discount_for_more_lt: Int
  discount_for_more_lte: Int
  discount_for_more_gt: Int
  discount_for_more_gte: Int
  line_items_some: LineItemWhereInput
  AND: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  checkout(where: CheckoutWhereUniqueInput!): Checkout
  checkouts(where: CheckoutWhereInput, orderBy: CheckoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Checkout]!
  checkoutsConnection(where: CheckoutWhereInput, orderBy: CheckoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CheckoutConnection!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem]!
  lineItemsConnection(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineItemConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum STATUS {
  PENDING
  SUCCESS
  ERROR
}

type Subscription {
  checkout(where: CheckoutSubscriptionWhereInput): CheckoutSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  lineItem(where: LineItemSubscriptionWhereInput): LineItemSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  last_name: String!
  is_admin: Boolean!
  password: String
  email: String
  cel_phone: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  last_name: String!
  is_admin: Boolean
  password: String
  email: String
  cel_phone: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  last_name_ASC
  last_name_DESC
  is_admin_ASC
  is_admin_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  cel_phone_ASC
  cel_phone_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  last_name: String!
  is_admin: Boolean!
  password: String
  email: String
  cel_phone: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  last_name: String
  is_admin: Boolean
  password: String
  email: String
  cel_phone: String
}

input UserUpdateManyMutationInput {
  name: String
  last_name: String
  is_admin: Boolean
  password: String
  email: String
  cel_phone: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  is_admin: Boolean
  is_admin_not: Boolean
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  cel_phone: String
  cel_phone_not: String
  cel_phone_in: [String!]
  cel_phone_not_in: [String!]
  cel_phone_lt: String
  cel_phone_lte: String
  cel_phone_gt: String
  cel_phone_gte: String
  cel_phone_contains: String
  cel_phone_not_contains: String
  cel_phone_starts_with: String
  cel_phone_not_starts_with: String
  cel_phone_ends_with: String
  cel_phone_not_ends_with: String
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    